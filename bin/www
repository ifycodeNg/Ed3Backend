#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http');
const fs = require('fs');
const https = require('https');
const debug = require('debug')('notifia-backend:server');
const app = require('../app');
const { nodePort, Devenv } = require('../config/secret');
const config = require('../config/secret');

let server ;
/**
   * Normalize a port into a number, string, or false.
   */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (port.isNaN) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
   * Get port from environment and store in Express.
   */

const port = normalizePort(config.nodePort);
// const port = normalizePort(5000);

app.set('port', port);

/**
   * Create HTTP server.
   */

if (Devenv === 'Local') {
  server = http.createServer(app);
} else if (Devenv === 'Prod') {
  const options = {
  	key: fs.readFileSync('/etc/ssl/private.key'),
  	cert: fs.readFileSync('/etc/ssl/certificate.crt'),

  };
  server = https.createServer(options, app);
}

/**
   * Event listener for HTTP server "error" event.
   */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
   * Event listener for HTTP server "listening" event.
   */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`Server Running on ${addr.address} ${nodePort}`);
}

/**
   * Listen on provided port, on all network interfaces.
   */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
